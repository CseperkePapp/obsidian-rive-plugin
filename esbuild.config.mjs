import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "main.js",
	minify: prod,
});

async function copyToVault() {
	let vaultPath = process.env.RIVE_VAULT || process.env.DEV_VAULT;
	// dev.local.json override
	if (!vaultPath) {
		try {
			const fs = await import('fs');
			if (fs.existsSync('dev.local.json')) {
				const raw = fs.readFileSync('dev.local.json','utf8');
				const json = JSON.parse(raw);
				vaultPath = json.vaultPath;
			}
		} catch {}
	}
	if (!vaultPath) return;
	try {
		const fs = await import('fs');
		const path = await import('path');
		const pluginId = 'obsidian-rive-plugin';
		const targetDir = path.join(vaultPath, '.obsidian', 'plugins', pluginId);
		if (!fs.existsSync(targetDir)) fs.mkdirSync(targetDir, { recursive: true });
		for (const f of ['main.js','manifest.json','styles.css']) {
			if (fs.existsSync(f)) fs.copyFileSync(f, path.join(targetDir, f));
		}
		console.log('[auto-deploy] Copied plugin files to', targetDir);
	} catch (e) {
		console.warn('[auto-deploy] Failed to copy to vault:', e?.message || e);
	}
}

if (prod) {
	await context.rebuild();
	await copyToVault();
	process.exit(0);
} else {
	await context.watch();
	await copyToVault(); // initial
	const rebuild = context; // context already watching; rely on onEnd hook
	esbuild.build({}) // no-op to ensure esbuild imported
	// Use watch rebuild events
	// esbuild context provides onDispose etc; emulate incremental after each build through log plugin not necessary
}
